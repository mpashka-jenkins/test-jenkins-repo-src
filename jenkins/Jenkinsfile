#!groovy


import com.cloudbees.plugins.credentials.CredentialsProvider
import org.jenkinsci.plugins.plaincredentials.StringCredentials
import org.jenkinsci.plugins.workflow.cps.GlobalVariable

node {
    def checkoutResult = checkout scm
    stage('Build') {

        def envVars = env.getEnvironment()
        def workspace = pwd()

/*
        String script_root = "${workspace}/freebsd-ci"
        String build_script = "${script_root}/scripts/build/build1.sh"
        String build_ufs_script = "${script_root}/scripts/build/build-ufs-image.sh"

        dir ("freebsd-ci") {
            git changelog: false, poll: false, url: "${script_url}"
        }
*/

//        return deleteDir()

// Write out the new json config file, to be used by subsequent scripts
//        writeFile file: 'config.json', text: json_str

        echo "checkout result: ${checkoutResult}"
        echo "scm: ${scm}"
        echo "env: ${envVars}"
        echo "workspace: ${workspace}"

/*
        echo("scm. branches: ${scm.branches}, doGenerateSubmoduleConfigurations: ${scm.doGenerateSubmoduleConfigurations} , " +
                "extensions: ${scm.extensions}, userRemoteConfigs: ${scm.userRemoteConfigs}")

        userRemoteConfigs = scm.userRemoteConfigs
        echo("name: ${userRemoteConfigs.name}, refspec: ${userRemoteConfigs.refspec}, url: ${userRemoteConfigs.url}, " +
                "credentialsId: ${userRemoteConfigs.credentialsId}")

        sh 'ls'


        echo 'Hello world from my pipeline'

        echo '------------ env'
        sh 'env'
        echo '------------ set'
        sh 'set'
        echo '------------'
*/

//        String sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()

//        git symbolic-ref HEAD
//        String branch = sh(returnStdout: true, script: "git symbolic-ref --short HEAD").trim()

//        GitSCM



        if (!fileExists('bin/hub')) {
            dir("bin") {
                sh(""" 
                    wget https://github.com/github/hub/releases/download/v2.3.0-pre10/hub-linux-amd64-2.3.0-pre10.tgz
                    tar -xvf hub-linux-amd64-2.3.0-pre10.tgz
                    mv hub-linux-amd64-2.3.0-pre10/bin/hub ./
                    """)
            }
        }

        withCredentials([string(credentialsId: env.MY_GITHUB_TOKEN, variable: 'TOKEN')]) {
            println("Token found: ${TOKEN.class} / ${TOKEN}")
            if (!fileExists("test-jenkins-repo-dst")) {
                sh("GITHUB_TOKEN=${TOKEN} bin/hub clone git@github.com:mpashka/test-jenkins-repo-dst.git")
            }
        }




        dir("test-jenkins-repo-dst") {
            String targetBranch = env.GITHUB_PR_TARGET_BRANCH
            String sourceBranch = env.GITHUB_PR_SOURCE_BRANCH

            sh("../bin/hub pull")

//            int targetBranchExists = sh(returnStatus: true, script: "git rev-parse --quiet --verify ${targetBranch}")
            int targetBranchExists = sh(returnStatus: true, script: "../bin/hub checkout ${targetBranch}")
            if (targetBranchExists != 0) {
                throw new hudson.AbortException("Target branch ${targetBranch} doesn't exist in dest project")
            }

            int sourceBranchExists = sh(returnStatus: true, script: "../bin/hub rev-parse --quiet --verify ${sourceBranch}")
            if (sourceBranchExists != 0) {
                sh("../bin/hub checkout -b ${sourceBranch}")
                sh("../bin/hub branch --set-upstream-to origin/${sourceBranch}")
            }

            writeFile(name: 'aaa.txt', text: "Creating commit for original ${env.GIT_COMMIT}")
            sh("../bin/hub add aaa.txt")
            sh("../bin/hub commit -m \"Commit from original ${env.GIT_COMMIT}\"")
            sh("../bin/hub push")

            if (sourceBranchExists != 0) {
                sh("../bin/hub pull-request -b ${targetBranch} -m \"Creating PR from src ${sourceBranch}\"")
            }
        }
    }
}

