#!groovy

node {
    def checkoutResult = checkout scm
    stage('Build') {

        def envVars = env.getEnvironment()
        def workspace = pwd()

/*
        String script_root = "${workspace}/freebsd-ci"
        String build_script = "${script_root}/scripts/build/build1.sh"
        String build_ufs_script = "${script_root}/scripts/build/build-ufs-image.sh"

        dir ("freebsd-ci") {
            git changelog: false, poll: false, url: "${script_url}"
        }
*/

//        return deleteDir()

// Write out the new json config file, to be used by subsequent scripts
//        writeFile file: 'config.json', text: json_str

        echo "checkout result: ${checkoutResult}"
        echo "scm: ${scm}"
        echo "env: ${envVars}"
        echo "workspace: ${workspace}"

        try {scm.branches} catch (Throwable e) {}
        try {scm.doGenerateSubmoduleConfigurations} catch (Throwable e) {}
        try {scm.extensions} catch (Throwable e) {}
        try {userRemoteConfigs = scm.userRemoteConfigs
            try {userRemoteConfigs.name} catch (Throwable e) {}
            try {userRemoteConfigs.refspec} catch (Throwable e) {}
            try {userRemoteConfigs.url} catch (Throwable e) {}
            try {userRemoteConfigs.credentialsId} catch (Throwable e) {}
        } catch (Throwable e) {}

        echo("scm. branches: ${scm.branches}, doGenerateSubmoduleConfigurations: ${scm.doGenerateSubmoduleConfigurations} , " +
                "extensions: ${scm.extensions}")

        userRemoteConfigs = scm.userRemoteConfigs
        echo("name: ${userRemoteConfigs.name}, refspec: ${userRemoteConfigs.refspec}, url: ${userRemoteConfigs.url}, " +
                "credentialsId: ${credentialsId}")

        sh 'ls'


        echo 'Hello world from my pipeline'

        echo '------------ env'
        sh 'env'
        echo '------------ set'
        sh 'set'
        echo '------------'

//        String sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()

//        git symbolic-ref HEAD
//        String branch = sh(returnStdout: true, script: "git symbolic-ref --short HEAD").trim()

//        GitSCM

        String targetBranch = env.GITHUB_PR_TARGET_BRANCH
        String sourceBranch = env.GITHUB_PR_SOURCE_BRANCH
//        GITHUB_PR_TITLE

        dir ("dst-project") {
            checkout([
                    $class                           : 'GitSCM',
                    branches                         : [[name: "*/${targetBranch}"], [name: "*/${sourceBranch}"]],
                    doGenerateSubmoduleConfigurations: false,
                    extensions                       : [],
                    userRemoteConfigs                : scm.userRemoteConfigs
//                    userRemoteConfigs                : [[]] scm.userRemoteConfigs
            ])
            int targetBranchExists = sh(returnStdout: false, returnStatus: true, script: "git rev-parse --quiet --verify ${targetBranch}").trim()
            if (targetBranchExists != 0) {
                echo "Target branch doesn't exist in "
            }
        }
    }
}
